<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:core="http://www.mulesoft.org/schema/mule/core" 
xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel"
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
version="EE-3.6.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/2.0/mule-siebel.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">

    <data-mapper:config name="map_to_map" transformationGraphPath="map_to_map.grf" doc:name="map_to_map"/>


    <batch:job name="migrateAccountsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <siebel:query-business-components config-ref="Oracle_Siebel_Business_Objects" businessObjectComponentType="Account.Account" doc:name="query Accounts from Siebel"
            	searchExpression="[Employees] &gt; 5000">
<!--             	searchExpression="[Employees] &gt; 5000 AND ([Industry] = &quot;Schools&quot; OR [Industry] = &quot;Energy&quot;)" -->
                <siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Account Number</siebel:fields-to-retrieve> <!--  AccountNumber -->
                	<siebel:fields-to-retrieve>Annual Revenue</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Source</siebel:fields-to-retrieve> <!-- Account Source -->
                	<siebel:fields-to-retrieve>Bill To City</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Bill To Country</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Bill To Postal Code</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Bill To State</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Bill To Street Address</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Description</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Fax Number</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Industry</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Last Update - SDQ</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Name</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Employees</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ownership Type</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Parent Account Id</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Phone Number</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Rate</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ship To City</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ship To Country</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ship To Postal Code</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ship To State</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ship To Street Address</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>SIC Code</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Ticker</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Type</siebel:fields-to-retrieve>
                	<siebel:fields-to-retrieve>Home Page</siebel:fields-to-retrieve>
                </siebel:fields-to-retrieve>
            </siebel:query-business-components>
        </batch:input> 
        <batch:process-records>
            <batch:step name="transformFieldsFromSiebelToSalesforceStep">
                <data-mapper:transform config-ref="map_to_map" doc:name="Map To Map"/>
            </batch:step>
            <batch:step name="getAccountFromSalesforceStep">
                <enricher source="#[payload]" target="#[recordVars['accountInSalesforce']]" doc:name="store result in record var 'accountInSalesforce'">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Name, LastModifiedDate FROM Account WHERE Name = '#[payload['Name']]'" doc:name="query Account from Salesforce"/>
                </enricher>
            </batch:step>
            <batch:step name="selectNewerAccountStep" accept-expression="!(recordVars['accountInSalesforce'] is NullPayload)">
                <choice doc:name="Choice">
                    <when expression="#[org.mule.templates.util.AccountDateComparator.isAfter(payload, recordVars['accountInSalesforce'], '${sieb.timeOffset}')]">
                        <expression-component doc:name="define Id for SalesForce"><![CDATA[payload['Id'] = recordVars['accountInSalesforce']['Id']]]></expression-component>
                    </when>
                    <otherwise>
                        <set-payload doc:name="set to null to skip this account" value="#[return null]"/>
                    </otherwise>
                </choice>
            </batch:step>
            <batch:step name="createAccountsInSalesforceStep" accept-expression="!(payload is NullPayload)">
                <expression-component doc:name="prepare for upsert"><![CDATA[payload.remove('LastModifiedDate');

if (payload.get('NumberOfEmployees').isEmpty()) {
	payload.remove('NumberOfEmployees') 
} else {
	int intNumberOfEmployees = Integer.parseInt(payload.get('NumberOfEmployees'));
	payload.put('NumberOfEmployees', intNumberOfEmployees);
}]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="Salesforce"  type="Account" doc:name="upsert accounts to Salesforce" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow" doc:name="mainFlow" processingStrategy="synchronous" doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="migrateAccountsBatch" doc:name="trigger migrateAccountsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
</mule>
